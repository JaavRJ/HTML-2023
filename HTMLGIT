<html>
<head><title>Comando GIT</title></head>
<body>
        <p><center><h1><strong>Que es GIT?</strong></h1></center></p>
        <p align="center">Git es un sistema de control de versiones distribuido que realiza
        un seguimiento de los cambios en cualquier conjunto de archivos de computadora</p>

        <ol type="A">
                <li><a href="#clone">Clone</li></a>
                <li><a href="#branch">Branch</li></a>
                <li><a href="#checkout">Checkout</li></a>    
                <li><a href="#status">Status</li></a>
                <li><a href="#commit">Commit</li></a>
                <li><a href="#init">Init</li></a>
                <li><a href="#remote">Remote</li></a>
                <li><a href="#push">Push</li></a>
                <li><a href="#pull">Pull</li></a>
        </ol>

        <p id="clone"><b>Clone</b>
            <br>Crea una copia de un repositorio de Git existente. La clonación es la forma más habitual de 
            que los desarrolladores obtengan una copia de trabajo de un repositorio central.<br>
            Ejemplo
            <br>
            git clone git@github.com:JaavRJ/HTML-2023.git
        <br><br><br>
        </p>

        <p id="branch"><b>Branch</b>
            <br>Este comando es tu herramienta de administración de ramas de uso general. Permite crear entornos de desarrollo aislados en un solo repositorio.<br>
            Ejemplo
            <br>
            git branch main
        <br><br><br>
        </p>

        <p id="checkout"><b>Checkout</b><br>
            Además de extraer las confirmaciones y las revisiones de archivos antiguas, git checkout también sirve para navegar 
            por las ramas existentes. Combinado con los comandos básicos de Git, es una forma de trabajar en una línea de desarrollo concreta.
        <br>
            Ejemplo<br>
            git checkout -b
            <br><br><br>
        </p>

        <p id="status"><b>Status</b>
        <br>Muestra el estado del directorio en el que estás trabajando y la instantánea preparada. Lo mejor es que lo ejecutes junto con git add y 
        git commit para ver exactamente qué se va a incluir en la próxima instantánea.
        <br>
        Ejemplo:
        <br>
        git status
        <br><br><br>
        </p>

        <p id="commit"><b>Commit</b>
        <br>Confirma la instantánea preparada en el historial del proyecto. En combinación con git add, define el flujo de trabajo 
        básico de todos los usuarios de Git.
        <br>
        Ejemplo:
        <br>
        git status -m "First commit"
        <br><br><br>
        </p>

        <p id="init"><b>Init</b>
            <br>Inicializa un nuevo repositorio de Git. Si quieres poner un proyecto bajo un control de revisiones,
             este es el primer comando que debes aprender.
            <br>
            Ejemplo:
            <br>
            git init
            <br><br><br>
            </p>
    
        <p id="remote"><b>Remote</b>
            <br>Es un comando útil para administrar conexiones remotas. En lugar de pasar la URL completa a los comandos
             fetch, pull y push, permite usar un atajo más significativo.
            <br>
            Ejemplo:
            <br>
            git remote -v
            <br><br><br>
            </p>

        <p id="push"><b>Push</b>
            <br>Enviar (push) es lo opuesto a recuperar (fetch), con algunas salvedades. Permite mover una o varias ramas a otro
            repositorio, lo que es una buena forma de publicar contribuciones. Es como svn commit, pero envía una serie de confirmaciones 
            en lugar de un solo conjunto de cambios.
            <br>
            Ejemplo:
            <br>
            git push origin main
            <br><br><br>
            </p>

        <p id="pull"><b>Pull</b>
            <br>Este comando es la versión automatizada de git fetch. Descarga una rama de un repositorio remoto e inmediatamente la fusiona en
             la rama actual. Este es el equivalente en Git de svn update.
            <br>
            Ejemplo:
            <br>
            git pull
            <br><br><br>
            </p>

</html>
